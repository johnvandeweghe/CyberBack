openapi: 3.0.0
info:
  version: 0.2.0
  title: Cyber Wars API
servers:
- url: No Production URL yet
paths:
  /maps:
    get:
      summary: Get all maps
      operationId: getMaps
      tags:
      - lobby
      responses:
        '200':
          description: 'The list of playable maps'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Maps'
  /game:
    post:
      summary: Create a game
      operationId: createGame
      tags:
      - lobby
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                mapId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: 'The meta information about a game, including map tile data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: The map id was not provided.
        '404':
          description: The map could not be found.
      callbacks:
        lobbyManagerGameProvision:
          'http://lobby/manager/url':
            post:
              headers:
                X-Signature:
                  description: Lowecase hex of the SHA256 HMAC of the body with the service's pre shared secret.
                  schema:
                    type: string
              requestBody:
                required: true
                content:
                  application/json:
                    $ref: '#/components/schemas/Game'
  '/game/{gameId}':
    get:
      summary: Get a specific game you know the ID for.
      operationId: getGame
      tags:
      - lobby
      parameters:
      - name: gameId
        in: path
        description: Which game's ID to retrieve
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: 'The meta information about a game, including map tile data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '404':
          description: The game could not be found.
  /player:
    post:
      summary: Add a player to a game
      operationId: addPlayer
      tags:
      - lobby
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                gameId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Player information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '403':
          description: The game is full.
        '404':
          description: The game could not be found.
  /player/{playerId}:
    get:
      summary: get a player by id
      operationId: getPlayer
      tags:
      - lobby
      parameters:
      - name: playerId
        in: path
        description: Which player's ID to retrieve
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Player information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
  '/units/{gameId}':
    get:
      summary: Get units for a game.
      operationId: getUnits
      tags:
      - game
      parameters:
      - name: gameId
        in: path
        description: Which game's units to retrieve
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Information about units in the current game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Units'
        '404':
          description: The game could not be found.
  '/unit/{unitId}':
    get:
      summary: Get a specific unit
      operationId: getUnit
      tags:
      - game
      parameters:
      - name: unitId
        in: path
        description: Which unit to retrieve
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Information about a specific unit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        '404':
          description: The unit could not be found.
  /turns:
    post:
      summary: Start a turn
      operationId: startTurn
      tags:
      - turn
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                playerId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: The turn that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '400':
          description: Unable to end turn until all units have been placed.
        '403':
          description: Not your turn.
        '404':
          description: The game could not be found.
  '/turns/{turnId}':
    patch:
      summary: Update a turn (used to end a turn)
      operationId: updateTurn
      tags:
      - turn
      parameters:
      - name: turnId
        in: path
        description: Which turn to update.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: turn-complete
      responses:
        '200':
          description: Information about units in the current game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Turn'
        '400':
          description: Missing turnId or set an invalid status
        '403':
          description: It is not your turn.
        '404':
          description: The turn could not be found.
  /unitAction:
    post:
      summary: Take an action as a unit on a turn.
      operationId: createUnitAction
      tags:
      - turn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitActionParams'
      responses:
        '200':
          description: Information about units in the current game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitAction'
        '400':
          description: Invalid action type, or missing/invalid body field.
        '403':
          description: 'It is not your turn, or the unit is out of action points'
        '404':
          description: The turn or unit could not be found.
components:
  schemas:
    Map:
      required:
      - id
      - numberOfPlayers
      - lobbyService
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 602aff3a-5427-48d5-9865-6cb92bcbef54
        numberOfPlayers:
          type: integer
          format: int32
          example: 1
          minimum: 1
        lobbyService:
          type: string
          example: "CyberWars Player Lobby"
    Maps:
      type: array
      items:
        $ref: '#/components/schemas/Map'
    Game:
      required:
      - id
      - playerNumber
      - turnNumber
      - map
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 602aff3a-5427-48d5-9865-6cb92bcbef54
        playerNumber:
          type: integer
          format: int32
          example: 1
          minimum: 1
        turnNumber:
          type: integer
          format: int32
          example: 3
          minimum: 0
        map:
          type: object
          required:
          - id
          - tiles
          properties:
            id:
              type: string
              format: uuid
              example: 80391e9e-5cd7-4dbc-9c71-dfca074a21e2
            tiles:
              type: array
              items:
                type: object
                required:
                - type
                - owner
                properties:
                  type:
                    type: string
                    example: concrete
                    enum:
                    - "concrete"
                    - "brick"
                  owner:
                    type: integer
                    format: int32
                    example: 1
                    minimum: 1
    Coordinates:
      type: object
      required:
      - 'x'
      - 'y'
      properties:
        'x':
          type: integer
          minimum: 0
        'y':
          type: integer
          minimum: 0
    Units:
      type: array
      items:
        $ref: '#/components/schemas/Unit'
    Unit:
      type: object
      required:
      - id
      - attack
      - defense
      - health
      - unitType
      - minRange
      - maxRange
      - owner
      properties:
        id:
          type: string
          format: uuid
        attack:
          type: integer
          format: int32
          example: 8
          minimum: 0
        defense:
          type: integer
          format: int32
          example: 15
          minimum: 0
        health:
          type: integer
          format: int32
          example: 40
          minimum: 0
        unitType:
          type: string
          example: magic
          enum:
          - "magic"
          - "swords"
          - "guns"
        minRange:
          type: integer
          format: int32
          example: 2
          minimum: 0
        maxRange:
          type: integer
          format: int32
          example: 4
          minimum: 0
        currentAP:
          type: integer
          format: int32
          example: 5
          minimum: 0
        maxAP:
          type: integer
          format: int32
          example: 5
          minimum: 0
        apRegen:
          type: integer
          format: int32
          example: 5
          minimum: 0
        owner:
          type: integer
          format: int32
          example: 1
          minimum: 1
        coordinates:
          $ref: "#/components/schemas/Coordinates"
    Player:
      type: object
      required:
      - id
      properties:
        id:
          type: string
          format: uuid
    Turn:
      type: object
      required:
      - id
      - status
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum:
          - "in-progress"
          - "turn-complete"
          example: in-progress
    UnitAction:
      type: object
      required:
      - unitId
      - turnId
      - type
      - status
      - affectedUnitIds
      properties:
        unitId:
          type: string
          format: uuid
        turnId:
          type: string
          format: uuid
        type:
          type: string
          enum:
          - "move"
          - "attack"
          example: move
        status:
          type: string
          enum:
          - "success"
          - "failed"
          example: "success"
        affectedUnitIds:
          type: array
          items:
            type: integer
            format: int32
    UnitActionParams:
      type: object
      required:
      - unitId
      - turnId
      - type
      properties:
        unitId:
          type: string
          format: uuid
        turnId:
          type: string
          format: uuid
        type:
          type: string
          enum:
          - "move"
          - "attack"
          example: move
        args:
          oneOf:
          - $ref: "#/components/schemas/MoveActionArgs"
          - $ref: "#/components/schemas/AttackActionArgs"
          description: Varies based on type
          example:
            path:
            - x: 1
              y: 2
            - x: 2
              y: 2
    MoveActionArgs:
      type: object
      required:
      - path
      properties:
        path:
          type: array
          items:
            $ref: "#/components/schemas/Coordinates"
    AttackActionArgs:
      type: object
      required:
      - targetUnitId
      properties:
        targetUnitId:
          type: string
          format: uuid
